/**
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */

import * as path from 'path';
import {
  Aws,
  CustomResource,
  Duration,
} from 'aws-cdk-lib';
import {
  PolicyStatement,
  Effect,
  Role,
  ServicePrincipal,
  Policy,
} from 'aws-cdk-lib/aws-iam';
import {
  Code, Function,
  LayerVersion,
  Runtime,
} from 'aws-cdk-lib/aws-lambda';
import { Construct } from 'constructs';
import { BuildConfig } from '../common/build-config';
import { SolutionInfo } from '../common/solution-info';

export interface RenameResourcesProps {
  readonly adminAccountId: string;
}

// delete agent resources generated by the program
export class RenameResourcesStack extends Construct {
  constructor(scope: Construct, id: string, props: RenameResourcesProps) {
    super(scope, id);

    // Create a lambda layer with required python packages.
    const renameResourcesLayer = new LayerVersion(this, 'RenameResources', {
      code: Code.fromAsset(path.join(__dirname, './rename-resources'), {
        bundling: {
          image: Runtime.PYTHON_3_9.bundlingImage,
          command: [
            'bash',
            '-c',
            `pip install -r requirements.txt ${BuildConfig.PIP_PARAMETER} -t /asset-output/python`,
          ],
        },
      }),
      // layerVersionName: `${SolutionInfo.SOLUTION_NAME}-RenameResources`,
      compatibleRuntimes: [Runtime.PYTHON_3_9],
      description: `${SolutionInfo.SOLUTION_FULL_NAME} - rename resources generated by the program layer`,
    });

    const renameResourcesRole = new Role(this, 'RenameResourcesRole', {
      roleName: `${SolutionInfo.SOLUTION_NAME}RenameResourcesRole-${Aws.REGION}`, //Name must be specified
      assumedBy: new ServicePrincipal('lambda.amazonaws.com'),
    });
    renameResourcesRole.attachInlinePolicy(new Policy(this, 'RenameResourcePolicy', {
      policyName: 'RenameResourcePolicy',
      statements: [
        new PolicyStatement({
          effect: Effect.ALLOW,
          actions: [
            'glue:GetCrawler',
            'glue:GetDatabase',
            'glue:GetConnection',
            'glue:CreateCrawler',
            'glue:CreateDatabase',
            'glue:CreateConnection',
            'glue:ListCrawlers',
            'lakeformation:*',
            'secretsmanager:ListSecrets',
            'secretsmanager:GetSecretValue',
            'kms:Decrypt',
            'kms:DescribeKey',
          ],
          resources: ['*'],
        }),
      ],
    }));

    renameResourcesRole.attachInlinePolicy(new Policy(this, 'RenameResourceLogPolicy', {
      policyName: 'LogPolicy',
      statements: [
        new PolicyStatement({
          effect: Effect.ALLOW,
          actions: [
            'logs:CreateLogGroup',
            'logs:CreateLogStream',
            'logs:PutLogEvents',
          ],
          resources: ['*'],
        }),
      ],
    }));

    const renameResourcesFunction = new Function(this, 'RenameResourcesFunction', {
      functionName: `${SolutionInfo.SOLUTION_NAME}-RenameResources`, //Name must be specified
      description: `${SolutionInfo.SOLUTION_FULL_NAME} - rename resources generated by the agent program`,
      runtime: Runtime.PYTHON_3_9,
      handler: 'rename_resources.lambda_handler',
      code: Code.fromAsset(path.join(__dirname, './rename-resources')),
      timeout: Duration.minutes(15),
      layers: [renameResourcesLayer],
      role: renameResourcesRole,
      environment: {
        SolutionName: SolutionInfo.SOLUTION_NAME,
        AdminAccountId: props.adminAccountId,
      },
    });
    renameResourcesFunction.node.addDependency(renameResourcesRole);

    const renameResourcesTrigger = new CustomResource(this, 'RenameResourcesTrigger', {
      serviceToken: renameResourcesFunction.functionArn,
      properties: {
        Version: SolutionInfo.SOLUTION_VERSION,
      },
    });
    renameResourcesTrigger.node.addDependency(renameResourcesFunction);
  }
}
