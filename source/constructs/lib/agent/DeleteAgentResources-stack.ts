/**
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */

import * as path from 'path';
import {
  Aws,
  CustomResource,
  Duration,
} from 'aws-cdk-lib';
import {
  PolicyStatement,
  Effect,
  Role,
  ServicePrincipal,
  Policy,
} from 'aws-cdk-lib/aws-iam';
import {
  Code, Function,
  LayerVersion,
  Runtime,
} from 'aws-cdk-lib/aws-lambda';
import { Construct } from 'constructs';
import { BuildConfig } from '../common/build-config';
import { SolutionInfo } from '../common/solution-info';

export interface DeleteAgentResourcesProps {
  readonly adminAccountId: string;
  queueName: string;
}

// delete agent resources generated by the program
export class DeleteAgentResourcesStack extends Construct {
  constructor(scope: Construct, id: string, props: DeleteAgentResourcesProps) {
    super(scope, id);

    // Create a lambda layer with required python packages.
    const deleteAgentResourcesLayer = new LayerVersion(this, 'DeleteAgentResources', {
      code: Code.fromAsset(path.join(__dirname, './delete-agent-resources'), {
        bundling: {
          image: Runtime.PYTHON_3_9.bundlingImage,
          command: [
            'bash',
            '-c',
            `pip install -r requirements.txt ${BuildConfig.PIP_MIRROR_PARAMETER} -t /asset-output/python`,
          ],
        },
      }),
      // layerVersionName: `${SolutionInfo.SOLUTION_NAME}-DeleteAgentResources`,
      compatibleRuntimes: [Runtime.PYTHON_3_9],
      description: `${SolutionInfo.SOLUTION_FULL_NAME} - delete resources generated by the program layer`,
    });

    const deleteAgentResourcesRole = new Role(this, 'DeleteAgentResourcesRole', {
      roleName: `${SolutionInfo.SOLUTION_NAME}DeleteAgentResourcesRole-${Aws.REGION}`, //Name must be specified
      assumedBy: new ServicePrincipal('lambda.amazonaws.com'),
    });
    deleteAgentResourcesRole.attachInlinePolicy(new Policy(this, 'DeleteAgentResourcePolicy', {
      policyName: 'DeleteAgentResourcePolicy',
      statements: [
        new PolicyStatement({
          effect: Effect.ALLOW,
          actions: [
            'glue:GetDatabase',
            'glue:GetDatabases',
            'glue:DeleteDatabase',
            'glue:GetConnections',
            'glue:DeleteConnection',
            'glue:GetTable',
            'glue:GetTables',
            'glue:DeleteTable',
            'glue:GetCrawler',
            'glue:ListCrawlers',
            'glue:DeleteCrawler',
            'glue:ListJobs',
            'glue:DeleteJob',
            'iam:DeleteRole',
            'iam:DeleteRolePolicy',
            'iam:ListAttachedRolePolicies',
            'iam:DetachRolePolicy',
          ],
          resources: ['*'],
        }),
        new PolicyStatement({
          effect: Effect.ALLOW,
          actions: [
            'sqs:SendMessage',
          ],
          resources: [
            `arn:${Aws.PARTITION}:sqs:${Aws.REGION}:${props.adminAccountId}:${props.queueName}`,
          ],
        }),
      ],
    }));

    deleteAgentResourcesRole.attachInlinePolicy(new Policy(this, 'DeleteAgentResourceLogPolicy', {
      policyName: 'LogPolicy',
      statements: [
        new PolicyStatement({
          effect: Effect.ALLOW,
          actions: [
            'logs:CreateLogGroup',
            'logs:CreateLogStream',
            'logs:PutLogEvents',
          ],
          resources: ['*'],
        }),
      ],
    }));

    const deleteAgentResourcesFunction = new Function(this, 'DeleteAgentResourcesFunction', {
      functionName: `${SolutionInfo.SOLUTION_NAME}-DeleteAgentResources`, //Name must be specified
      description: `${SolutionInfo.SOLUTION_FULL_NAME} - delete resources generated by the agent program`,
      runtime: Runtime.PYTHON_3_9,
      handler: 'delete_agent_resources.lambda_handler',
      code: Code.fromAsset(path.join(__dirname, './delete-agent-resources')),
      timeout: Duration.minutes(15),
      layers: [deleteAgentResourcesLayer],
      role: deleteAgentResourcesRole,
      environment: {
        SolutionName: SolutionInfo.SOLUTION_NAME,
        AdminAccountId: props.adminAccountId,
        QueueName: `${SolutionInfo.SOLUTION_NAME}-AutoSyncData`,
        AgentAccountID: Aws.ACCOUNT_ID,
        RegionName: Aws.REGION,
        RoleName: `${SolutionInfo.SOLUTION_NAME}RoleForAdmin-${Aws.REGION}`,
      },
    });
    deleteAgentResourcesFunction.node.addDependency(deleteAgentResourcesRole);

    const deleteAgentResourcesTrigger = new CustomResource(this, 'DeleteAgentResourcesTrigger', {
      serviceToken: deleteAgentResourcesFunction.functionArn,
      properties: {
        Version: SolutionInfo.SOLUTION_VERSION,
      },
    });
    deleteAgentResourcesTrigger.node.addDependency(deleteAgentResourcesFunction);
  }
}
