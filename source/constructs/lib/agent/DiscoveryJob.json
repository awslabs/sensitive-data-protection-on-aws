{
  "Comment": "Sensitive data protection",
  "StartAt": "FirstWait",
  "States": {
    "FirstWait": {
      "Type": "Wait",
      "Next": "GetCrawler",
      "SecondsPath": "$.FirstWait"
    },
    "GetCrawler": {
      "Type": "Task",
      "Parameters": {
        "Name.$": "$.CrawlerName"
      },
      "Resource": "arn:${AWS::Partition}:states:::aws-sdk:glue:getCrawler",
      "ResultPath": "$.GetCrawler",
      "Next": "Choice",
      "Retry": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "BackoffRate": 2,
          "IntervalSeconds": 100,
          "MaxAttempts": 3
        }
      ]
    },
    "Choice": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.GetCrawler.Crawler.State",
          "StringEquals": "READY",
          "Next": "StartCrawler"
        }
      ],
      "Default": "Wait"
    },
    "StartCrawler": {
      "Type": "Task",
      "Parameters": {
        "Name.$": "$.CrawlerName"
      },
      "ResultPath": "$.StartCrawler",
      "Resource": "arn:${AWS::Partition}:states:::aws-sdk:glue:startCrawler",
      "Next": "Wait",
      "Retry": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "BackoffRate": 2,
          "IntervalSeconds": 100,
          "MaxAttempts": 3
        }
      ]
    },
    "GetCrawler2": {
      "Type": "Task",
      "Parameters": {
        "Name.$": "$.CrawlerName"
      },
      "Resource": "arn:${AWS::Partition}:states:::aws-sdk:glue:getCrawler",
      "Next": "Choice2",
      "ResultPath": "$.GetCrawler",
      "Retry": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "BackoffRate": 2,
          "IntervalSeconds": 100,
          "MaxAttempts": 3
        }
      ]
    },
    "Choice2": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.GetCrawler.Crawler.State",
          "StringEquals": "READY",
          "Next": "Lambda Invoke"
        },
        {
          "Or": [
            {
              "Variable": "$.GetCrawler.Crawler.State",
              "StringEquals": "FAILED"
            },
            {
              "Variable": "$.GetCrawler.Crawler.State",
              "StringEquals": "CANCELLED"
            }
          ],
          "Next": "GetCrawlerFail"
        }
      ],
      "Default": "Wait"
    },
    "Lambda Invoke": {
      "Type": "Task",
      "Resource": "arn:${AWS::Partition}:states:::lambda:invoke",
      "OutputPath": "$.Payload",
      "Parameters": {
        "Payload.$": "$",
        "FunctionName": "arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:SDPS-SplitJob:$LATEST"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 2,
          "MaxAttempts": 6,
          "BackoffRate": 2
        }
      ],
      "Next": "Map"
    },
    "Map": {
      "Type": "Map",
      "ItemProcessor": {
        "ProcessorConfig": {
          "Mode": "INLINE"
        },
        "StartAt": "Glue StartJobRun",
        "States": {
          "Glue StartJobRun": {
            "Type": "Task",
            "Resource": "arn:${AWS::Partition}:states:::glue:startJobRun.sync",
            "Parameters": {
              "JobName.$": "$.JobName",
              "Arguments": {
                "--JobId.$": "$.JobId",
                "--RunId.$": "$.RunId",
                "--RunDatabaseId.$": "$.RunDatabaseId",
                "--AccountId.$": "$.AccountId",
                "--Region.$": "$.Region",
                "--DatabaseType.$": "$.DatabaseType",
                "--DatabaseName.$": "$.DatabaseName",
                "--TableName.$": "$.TableName",
                "--TemplateId.$": "$.TemplateId",
                "--TemplateSnapshotNo.$": "$.TemplateSnapshotNo",
                "--ExcludeKeywords.$": "$.ExcludeKeywords",
                "--Depth.$": "$.Depth",
                "--BaseTime.$": "$.BaseTime",
                "--DetectionThreshold.$": "$.DetectionThreshold",
                "--AdminAccountId.$": "$.AdminAccountId",
                "--BucketName.$": "$.BucketName",
                "--TableBegin.$": "$.TableBegin",
                "--TableEnd.$": "$.TableEnd",
                "--additional-python-modules.$": "$.AdditionalPythonModules"
              }
            },
            "End": true,
            "ResultPath": "$.StartJobRun",
            "Retry": [
              {
                "ErrorEquals": [
                  "States.ALL"
                ],
                "BackoffRate": 2,
                "IntervalSeconds": 100,
                "MaxAttempts": 3
              }
            ]
          }
        }
      },
      "Next": "SuccessPass",
      "ItemsPath": "$.JobItems",
      "OutputPath": "$.[0]"
    },
    "GetCrawlerFail": {
      "Type": "Pass",
      "Next": "SQS SendMessageFail",
      "Result": {
        "Status": "Failed",
        "Message": "The state of the crawler is not ready."
      },
      "ResultPath": "$.Result"
    },
    "SQS SendMessageFail": {
      "Type": "Task",
      "Resource": "arn:${AWS::Partition}:states:::sqs:sendMessage",
      "Parameters": {
        "MessageBody.$": "$",
        "QueueUrl.$": "$.QueueUrl"
      },
      "Next": "Fail"
    },
    "SuccessPass": {
      "Type": "Pass",
      "Result": {
        "State": "Succeeded"
      },
      "ResultPath": "$.Result",
      "Next": "SQS SendMessage"
    },
    "SQS SendMessage": {
      "Type": "Task",
      "Resource": "arn:${AWS::Partition}:states:::sqs:sendMessage",
      "Parameters": {
        "MessageBody.$": "$",
        "QueueUrl.$": "$.QueueUrl"
      },
      "End": true
    },
    "Wait": {
      "Type": "Wait",
      "Next": "GetCrawler2",
      "SecondsPath": "$.LoopWait"
    },
    "Fail": {
      "Type": "Fail"
    }
  }
}