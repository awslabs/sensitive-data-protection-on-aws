{
	"StartAt": "Parallel",
	"States": {
		"Parallel": {
			"Type": "Parallel",
			"Branches": [
				{
					"StartAt": "NeedRunStructured",
					"States": {
						"NeedRunStructured": {
							"Type": "Choice",
							"Choices": [
								{
									"Not": {
										"Variable": "$.DepthStructured",
										"StringEquals": "0"
									},
									"Next": "NeedRunCrawler"
								}
							],
							"Default": "Structured Job Succeeded"
						},
						"NeedRunCrawler": {
							"Type": "Choice",
							"Choices": [
								{
									"Variable": "$.NeedRunCrawler",
									"BooleanEquals": true,
									"Next": "FirstWait"
								}
							],
							"Default": "IsGlue"
						},
						"IsGlue": {
							"Type": "Choice",
							"Choices": [
								{
									"Variable": "$.DatabaseType",
									"StringEquals": "glue",
									"Next": "SendSchemaMessageGlue"
								}
							],
							"Default": "SplitJob"
						},
						"SendSchemaMessageGlue": {
							"Type": "Task",
							"Resource": "arn:${AWS::Partition}:states:::lambda:invoke",
							"Parameters": {
								"FunctionName": "arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:SDPS-CrawlerTrigger:$LATEST",
								"Payload": {
									"detail": {
										"accountId.$": "$.AccountId",
										"databaseType": "glue",
										"databaseName.$": "$.DatabaseName",
										"state": "Succeeded"
									},
									"region.$": "$.Region"
								}
							},
							"Retry": [
								{
									"ErrorEquals": [
										"Lambda.ServiceException",
										"Lambda.AWSLambdaException",
										"Lambda.SdkClientException",
										"Lambda.TooManyRequestsException"
									],
									"IntervalSeconds": 2,
									"MaxAttempts": 6,
									"BackoffRate": 2
								}
							],
							"Next": "SplitJob",
							"ResultPath": "$.SendSchemaMessage"
						},
						"FirstWait": {
							"Type": "Wait",
							"Next": "GetCrawler",
							"SecondsPath": "$.FirstWait"
						},
						"GetCrawler": {
							"Type": "Task",
							"Parameters": {
								"Name.$": "$.CrawlerName"
							},
							"Resource": "arn:${AWS::Partition}:states:::aws-sdk:glue:getCrawler",
							"ResultPath": "$.GetCrawler",
							"Next": "NeedStartCrawler",
							"Retry": [
								{
									"ErrorEquals": [
										"States.ALL"
									],
									"BackoffRate": 2,
									"IntervalSeconds": 100,
									"MaxAttempts": 3
								}
							]
						},
						"NeedStartCrawler": {
							"Type": "Choice",
							"Choices": [
								{
									"Variable": "$.GetCrawler.Crawler.State",
									"StringEquals": "READY",
									"Next": "StartCrawler"
								}
							],
							"Default": "WaitingForCrawler"
						},
						"StartCrawler": {
							"Type": "Task",
							"Parameters": {
								"Name.$": "$.CrawlerName"
							},
							"ResultPath": "$.StartCrawler",
							"Resource": "arn:${AWS::Partition}:states:::aws-sdk:glue:startCrawler",
							"Next": "WaitingForCrawler",
							"Retry": [
								{
									"ErrorEquals": [
										"States.ALL"
									],
									"BackoffRate": 2,
									"IntervalSeconds": 100,
									"MaxAttempts": 3
								}
							]
						},
						"GetCrawler2": {
							"Type": "Task",
							"Parameters": {
								"Name.$": "$.CrawlerName"
							},
							"Resource": "arn:${AWS::Partition}:states:::aws-sdk:glue:getCrawler",
							"Next": "CheckCrawlerState",
							"ResultPath": "$.GetCrawler",
							"Retry": [
								{
									"ErrorEquals": [
										"States.ALL"
									],
									"BackoffRate": 2,
									"IntervalSeconds": 100,
									"MaxAttempts": 3
								}
							]
						},
						"CheckCrawlerState": {
							"Type": "Choice",
							"Choices": [
								{
									"And": [
										{
											"Variable": "$.GetCrawler.Crawler.State",
											"StringEquals": "READY"
										},
										{
											"Variable": "$.GetCrawler.Crawler.LastCrawl.Status",
											"StringEquals": "SUCCEEDED"
										}
									],
									"Next": "SplitJob"
								},
								{
									"Or": [
										{
											"Variable": "$.GetCrawler.Crawler.State",
											"StringEquals": "FAILED"
										},
										{
											"Variable": "$.GetCrawler.Crawler.State",
											"StringEquals": "CANCELLED"
										},
										{
											"And": [
												{
													"Variable": "$.GetCrawler.Crawler.State",
													"StringEquals": "READY"
												},
												{
													"Not": {
														"Variable": "$.GetCrawler.Crawler.LastCrawl.Status",
														"StringEquals": "SUCCEEDED"
													}
												}
											]
										}
									],
									"Next": "Structured Job Failed"
								}
							],
							"Default": "WaitingForCrawler"
						},
						"SplitJob": {
							"Type": "Task",
							"Resource": "arn:${AWS::Partition}:states:::lambda:invoke",
							"OutputPath": "$.Payload",
							"Parameters": {
								"Payload.$": "$",
								"FunctionName": "arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:SDPS-SplitJob:$LATEST"
							},
							"Retry": [
								{
									"ErrorEquals": [
										"Lambda.ServiceException",
										"Lambda.AWSLambdaException",
										"Lambda.SdkClientException",
										"Lambda.TooManyRequestsException"
									],
									"IntervalSeconds": 2,
									"MaxAttempts": 6,
									"BackoffRate": 2
								}
							],
							"Next": "NeedRunStructuredJob"
						},
						"NeedRunStructuredJob": {
							"Type": "Choice",
							"Choices": [
								{
									"Variable": "$.JobNumber",
									"NumericEquals": 0,
									"Next": "Structured Job Succeeded"
								}
							],
							"Default": "Map"
						},
						"Map": {
							"Type": "Map",
							"ItemProcessor": {
								"ProcessorConfig": {
									"Mode": "INLINE"
								},
								"StartAt": "GlueStartJobRunStructured",
								"States": {
									"GlueStartJobRunStructured": {
										"Type": "Task",
										"Resource": "arn:${AWS::Partition}:states:::glue:startJobRun.sync",
										"Parameters": {
											"JobName.$": "$.JobNameStructured",
											"Arguments": {
												"--JobId.$": "$.JobId",
												"--RunId.$": "$.RunId",
												"--RunDatabaseId.$": "$.RunDatabaseId",
												"--AccountId.$": "$.AccountId",
												"--Region.$": "$.Region",
												"--DatabaseType.$": "$.DatabaseType",
												"--DatabaseName.$": "$.DatabaseName",
												"--GlueDatabaseName.$": "$.GlueDatabaseName",
												"--TableName.$": "$.TableName",
												"--TemplateId.$": "$.TemplateId",
												"--TemplateSnapshotNo.$": "$.TemplateSnapshotNo",
												"--Depth.$": "$.DepthStructured",
												"--ExcludeKeywords.$": "$.ExcludeKeywords",
												"--IncludeKeywords.$": "$.IncludeKeywords",
												"--BaseTime.$": "$.BaseTime",
												"--DetectionThreshold.$": "$.DetectionThreshold",
												"--AdminAccountId.$": "$.AdminAccountId",
												"--AdminBucketName.$": "$.AdminBucketName",
												"--TableBegin.$": "$.TableBegin",
												"--TableEnd.$": "$.TableEnd",
												"--additional-python-modules.$": "$.AdditionalPythonModules",
												"--extra-py-files.$": "$.ExtraPyFiles"
											}
										},
										"End": true,
										"ResultPath": "$.StartJobRun",
										"Retry": [
											{
												"ErrorEquals": [
													"States.TaskFailed"
												],
												"BackoffRate": 2,
												"IntervalSeconds": 100,
												"MaxAttempts": 3
											}
										]
									}
								}
							},
							"Next": "Structured Job Succeeded",
							"OutputPath": "$.[0]",
							"ItemsPath": "$.JobItems"
						},
						"Structured Job Failed": {
							"Type": "Pass",
							"Result": {
								"State": "Failed",
								"Message": "The state of the crawler is not ready."
							},
							"ResultPath": "$.Result",
							"End": true
						},
						"Structured Job Succeeded": {
							"Type": "Pass",
							"Result": {
								"State": "Succeeded"
							},
							"ResultPath": "$.Result",
							"End": true
						},
						"WaitingForCrawler": {
							"Type": "Wait",
							"Next": "GetCrawler2",
							"SecondsPath": "$.LoopWait"
						}
					}
				},
				{
					"StartAt": "NeedRunUnstructured",
					"States": {
						"NeedRunUnstructured": {
							"Type": "Choice",
							"Choices": [
								{
									"And": [
										{
											"Variable": "$.DatabaseType",
											"StringEquals": "s3"
										},
										{
											"Not": {
												"Variable": "$.DepthUnstructured",
												"StringEquals": "0"
											}
										}
									],
									"Next": "GetAgentBucketName"
								}
							],
							"Default": "Unstructured Job Succeeded"
						},
						"GetAgentBucketName": {
							"Type": "Task",
							"Next": "UnstructuredCrawler",
							"Parameters": {
								"Name": "SDPS-AgentBucketName"
							},
							"Resource": "arn:${AWS::Partition}:states:::aws-sdk:ssm:getParameter",
							"ResultPath": "$.AgentBucketName"
						},
						"UnstructuredCrawler": {
							"Type": "Task",
							"Resource": "arn:${AWS::Partition}:states:::lambda:invoke",
							"Parameters": {
								"FunctionName": "arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:SDPS-UnstructuredCrawler",
								"Payload": {
									"SourceBucketName.$": "$.DatabaseName",
									"ResultBucketName.$": "$.AgentBucketName.Parameter.Value",
									"ScanDepth.$": "$.DepthUnstructured",
									"IncludeFileExtensions.$": "$.IncludeFileExtensions",
									"ExcludeFileExtensions.$": "$.ExcludeFileExtensions",
									"BaseTime.$": "$.BaseTime"
								}
							},
							"Retry": [
								{
									"ErrorEquals": [
										"Lambda.ServiceException",
										"Lambda.AWSLambdaException",
										"Lambda.SdkClientException",
										"Lambda.TooManyRequestsException"
									],
									"IntervalSeconds": 2,
									"MaxAttempts": 6,
									"BackoffRate": 2
								}
							],
							"Next": "BuildProcessingJobParam",
							"ResultPath": "$.RunCrawler"
						},
						"BuildProcessingJobParam": {
							"Type": "Parallel",
							"Next": "SageMaker CreateProcessingJob",
							"Branches": [
								{
									"StartAt": "SourceBucketNameKey",
									"States": {
										"SourceBucketNameKey": {
											"Type": "Pass",
											"End": true,
											"Result": "--SourceBucketName"
										}
									}
								},
								{
									"StartAt": "SourceBucketNameValue",
									"States": {
										"SourceBucketNameValue": {
											"Type": "Pass",
											"End": true,
											"InputPath": "$.DatabaseName"
										}
									}
								},
								{
									"StartAt": "ResultBucketNameKey",
									"States": {
										"ResultBucketNameKey": {
											"Type": "Pass",
											"End": true,
											"Result": "--ResultBucketName"
										}
									}
								},
								{
									"StartAt": "ResultBucketNameValue",
									"States": {
										"ResultBucketNameValue": {
											"Type": "Pass",
											"End": true,
											"InputPath": "$.AgentBucketName.Parameter.Value"
										}
									}
								},
								{
									"StartAt": "RegionNameKey",
									"States": {
										"RegionNameKey": {
											"Type": "Pass",
											"End": true,
											"Result": "--RegionName"
										}
									}
								},
								{
									"StartAt": "RegionNameValue",
									"States": {
										"RegionNameValue": {
											"Type": "Pass",
											"End": true,
											"InputPath": "$.Region"
										}
									}
								}
							],
							"ResultPath": "$.ProcessingJobParam"
						},
						"SageMaker CreateProcessingJob": {
							"Type": "Task",
							"Resource": "arn:${AWS::Partition}:states:::sagemaker:createProcessingJob",
							"Parameters": {
								"AppSpecification": {
									"ContainerArguments.$": "$.ProcessingJobParam",
									"ContainerEntrypoint": [
										"python",
										"main.py"
									],
									"ImageUri.$": "$.UnstructuredParserJobImageUri"
								},
								"ProcessingResources": {
									"ClusterConfig": {
										"InstanceCount": 1,
										"InstanceType": "ml.m5.2xlarge",
										"VolumeSizeInGB": 1
									}
								},
								"RoleArn.$": "$.UnstructuredParserJobRole",
								"ProcessingJobName.$": "$.RunName"
							},
							"Next": "WaitingForProcessingJob",
							"ResultPath": "$.CreateProcessingJob"
						},
						"WaitingForProcessingJob": {
							"Type": "Wait",
							"Seconds": 30,
							"Next": "DescribeProcessingJob"
						},
						"DescribeProcessingJob": {
							"Type": "Task",
							"Next": "Job Complete?",
							"Parameters": {
								"ProcessingJobName.$": "$.RunName"
							},
							"Resource": "arn:${AWS::Partition}:states:::aws-sdk:sagemaker:describeProcessingJob",
							"ResultPath": "$.GetProcessingJob"
						},
						"Job Complete?": {
							"Type": "Choice",
							"Choices": [
								{
									"Variable": "$.GetProcessingJob.ProcessingJobStatus",
									"StringEquals": "Completed",
									"Next": "SendSchemaMessageUnstructured"
								},
								{
									"Variable": "$.GetProcessingJob.ProcessingJobStatus",
									"StringEquals": "Failed",
									"Next": "Unstructured Job Failed"
								}
							],
							"Default": "WaitingForProcessingJob"
						},
						"SendSchemaMessageUnstructured": {
							"Type": "Task",
							"Resource": "arn:${AWS::Partition}:states:::lambda:invoke",
							"Parameters": {
								"FunctionName": "arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:SDPS-CrawlerTrigger:$LATEST",
								"Payload": {
									"detail": {
										"accountId.$": "$.AccountId",
										"databaseType": "unstructured",
										"databaseName.$": "$.DatabaseName",
										"state": "Succeeded"
									},
									"region.$": "$.Region"
								}
							},
							"Retry": [
								{
									"ErrorEquals": [
										"Lambda.ServiceException",
										"Lambda.AWSLambdaException",
										"Lambda.SdkClientException",
										"Lambda.TooManyRequestsException"
									],
									"IntervalSeconds": 2,
									"MaxAttempts": 6,
									"BackoffRate": 2
								}
							],
							"Next": "AddIsUnstructuredParam",
							"ResultPath": "$.SendSchemaMessage"
						},
						"AddIsUnstructuredParam": {
							"Type": "Pass",
							"Next": "SplitJobUnstructured",
							"Result": "true",
							"ResultPath": "$.IsUnstructured"
						},
						"SplitJobUnstructured": {
							"Type": "Task",
							"Resource": "arn:${AWS::Partition}:states:::lambda:invoke",
							"OutputPath": "$.Payload",
							"Parameters": {
								"Payload.$": "$",
								"FunctionName": "arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:SDPS-SplitJob:$LATEST"
							},
							"Retry": [
								{
									"ErrorEquals": [
										"Lambda.ServiceException",
										"Lambda.AWSLambdaException",
										"Lambda.SdkClientException",
										"Lambda.TooManyRequestsException"
									],
									"IntervalSeconds": 2,
									"MaxAttempts": 6,
									"BackoffRate": 2
								}
							],
							"Next": "NeedRunUnstructuredJob"
						},
						"NeedRunUnstructuredJob": {
							"Type": "Choice",
							"Choices": [
								{
									"Variable": "$.JobNumber",
									"NumericEquals": 0,
									"Next": "Unstructured Job Succeeded"
								}
							],
							"Default": "MapUnstructured"
						},
						"MapUnstructured": {
							"Type": "Map",
							"ItemProcessor": {
								"ProcessorConfig": {
									"Mode": "INLINE"
								},
								"StartAt": "GlueStartJobRunUnstructured",
								"States": {
									"GlueStartJobRunUnstructured": {
										"Type": "Task",
										"Resource": "arn:${AWS::Partition}:states:::glue:startJobRun.sync",
										"Parameters": {
											"JobName.$": "$.JobNameUnstructured",
											"Arguments": {
												"--JobId.$": "$.JobId",
												"--RunId.$": "$.RunId",
												"--RunDatabaseId.$": "$.RunDatabaseId",
												"--AccountId.$": "$.AccountId",
												"--Region.$": "$.Region",
												"--DatabaseType.$": "$.DatabaseType",
												"--DatabaseName.$": "$.DatabaseName",
												"--TableName.$": "$.TableName",
												"--TemplateId.$": "$.TemplateId",
												"--TemplateSnapshotNo.$": "$.TemplateSnapshotNo",
												"--Depth.$": "$.DepthUnstructured",
												"--ExcludeKeywords.$": "$.ExcludeKeywords",
												"--IncludeKeywords.$": "$.IncludeKeywords",
												"--BaseTime.$": "$.BaseTime",
												"--DetectionThreshold.$": "$.DetectionThreshold",
												"--AdminAccountId.$": "$.AdminAccountId",
												"--AdminBucketName.$": "$.AdminBucketName",
												"--TableBegin.$": "$.TableBegin",
												"--TableEnd.$": "$.TableEnd",
												"--enable-glue-datacatalog": "true",
												"--additional-python-modules.$": "$.AdditionalPythonModules",
												"--extra-py-files.$": "$.ExtraPyFiles"
											}
										},
										"ResultPath": "$.StartJobRun",
										"End": true,
										"Retry": [
											{
												"ErrorEquals": [
													"States.TaskFailed"
												],
												"BackoffRate": 2,
												"IntervalSeconds": 100,
												"MaxAttempts": 3
											}
										]
									}
								}
							},
							"Next": "Unstructured Job Succeeded",
							"OutputPath": "$.[0]",
							"ItemsPath": "$.JobItems"
						},
						"Unstructured Job Succeeded": {
							"Type": "Pass",
							"End": true,
							"Result": {
								"State": "Succeeded"
							},
							"ResultPath": "$.Result"
						},
						"Unstructured Job Failed": {
							"Type": "Pass",
							"ResultPath": "$.Result",
							"Result": {
								"State": "Failed",
								"Message": "ProcessingJob is failed."
							},
							"End": true
						}
					}
				}
			],
			"Next": "Convert Data Format"
		},
		"Convert Data Format": {
			"Type": "Pass",
			"Parameters": {
				"Structured.$": "$.[0]",
				"Unstructured.$": "$.[1]"
			},
			"Next": "Choice"
		},
		"Choice": {
			"Type": "Choice",
			"Choices": [
				{
					"Variable": "$.Unstructured.Result.State",
					"StringEquals": "Failed",
					"Next": "FilterUnstructuredResult"
				}
			],
			"Default": "FilterStructuredResult"
		},
		"FilterUnstructuredResult": {
			"Type": "Pass",
			"OutputPath": "$.Unstructured",
			"Next": "SQS SendMessage"
		},
		"SQS SendMessage": {
			"Type": "Task",
			"Resource": "arn:${AWS::Partition}:states:::sqs:sendMessage",
			"Parameters": {
				"MessageBody.$": "$",
				"QueueUrl.$": "$.QueueUrl"
			},
			"End": true
		},
		"FilterStructuredResult": {
			"Type": "Pass",
			"OutputPath": "$.Structured",
			"Next": "SQS SendMessage"
		}
	},
	"Comment": "Sensitive Data Protection on AWS"
}