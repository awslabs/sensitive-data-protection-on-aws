/**
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */

import * as path from 'path';
import {
  Aws, CfnCondition, CfnOutput, CustomResource, Duration, Fn,
} from 'aws-cdk-lib';
import { PolicyStatement, Effect, Role, ServicePrincipal, Policy } from 'aws-cdk-lib/aws-iam';
import {
  Code, Function,
  LayerVersion,
  Runtime,
} from 'aws-cdk-lib/aws-lambda';
import { Construct } from 'constructs';
import { BuildConfig } from '../common/build-config';
import { SolutionInfo } from '../common/solution-info';

export interface AcmProps {
  readonly certificateArn: string;
  readonly bucketName: string;
}

export class AcmStack extends Construct {
  readonly certificateArn: string;

  constructor(scope: Construct, id: string, props: AcmProps) {
    super(scope, id);

    // Create a lambda layer with required python packages.
    const acmLayer = new LayerVersion(this, 'AcmLayer', {
      code: Code.fromAsset(path.join(__dirname, './acm'), {
        bundling: {
          image: Runtime.PYTHON_3_9.bundlingImage,
          command: [
            'bash',
            '-c',
            `pip install --platform manylinux2014_x86_64 --only-binary=:all: -r requirements.txt ${BuildConfig.PIP_MIRROR_PARAMETER} -t /asset-output/python`,
          ],
        },
      }),
      // layerVersionName: `${SolutionInfo.SOLUTION_NAME_ABBR}-DeleteResources`,
      compatibleRuntimes: [Runtime.PYTHON_3_9],
      description: `${SolutionInfo.SOLUTION_NAME} - ACM generated by the program layer`,
    });

    const acmRole = new Role(this, 'AcmRole', {
      assumedBy: new ServicePrincipal('lambda.amazonaws.com'),
    });
    acmRole.attachInlinePolicy(new Policy(this, 'AWSLambdaBasicExecutionPolicy', {
      policyName: 'AWSLambdaBasicExecutionPolicy',
      statements: [
        new PolicyStatement({
          effect: Effect.ALLOW,
          actions: [
            'logs:CreateLogGroup',
            'logs:CreateLogStream',
            'logs:PutLogEvents',
          ],
          resources: ['*'],
        }),
      ],
    }));
    const noramlStatement = new PolicyStatement({
      effect: Effect.ALLOW,
      actions: ['acm:ImportCertificate',
        'acm:DeleteCertificate',
        'acm:AddTagsToCertificate',
        'acm:ListTagsForCertificate',
        's3:PutObject'],
      resources: [`arn:${Aws.PARTITION}:acm:*:${Aws.ACCOUNT_ID}:certificate/*`,
        `arn:${Aws.PARTITION}:s3:::${SolutionInfo.SOLUTION_ADMIN_S3_BUCKET}-${Aws.ACCOUNT_ID}-${Aws.REGION}/*`],
    });
    acmRole.addToPolicy(noramlStatement);
    const listCertificatesStatement = new PolicyStatement({
      effect: Effect.ALLOW,
      actions: ['acm:ListCertificates'],
      resources: ['*'],
    });
    acmRole.addToPolicy(listCertificatesStatement);

    const acmFunction = new Function(this, 'AcmFunction', {
      functionName: `${SolutionInfo.SOLUTION_NAME_ABBR}-ACM`, //Name must be specified
      description: `${SolutionInfo.SOLUTION_NAME} - This creates a self-signed certificate used by your LoadBalancer`,
      runtime: Runtime.PYTHON_3_9,
      handler: 'acm.lambda_handler',
      code: Code.fromAsset(path.join(__dirname, './acm')),
      memorySize: 1024,
      timeout: Duration.minutes(1),
      layers: [acmLayer],
      role: acmRole,
    });
    acmFunction.node.addDependency(acmRole);

    const acmTrigger = new CustomResource(this, 'AcmTrigger', {
      serviceToken: acmFunction.functionArn,
      properties: {
        SolutionNameAbbr: SolutionInfo.SOLUTION_NAME_ABBR,
        Version: SolutionInfo.SOLUTION_VERSION,
        CertificateArn: props.certificateArn,
        BucketName: props.bucketName,
      },
    });
    acmTrigger.node.addDependency(acmFunction);
    this.certificateArn = acmTrigger.getAttString('CertificateArn');

    // const showCertificate = new CfnCondition(this, 'IsHttp', { expression: Fn.conditionEquals(props.certificateArn, '') });
    // const certificateS3Key = acmTrigger.getAttString('CertificateS3Key');
    // new CfnOutput(scope, 'ServerRootCertificate', {
    //   description: 'Server Root Certificate',
    //   value: certificateS3Key,
    // }).condition = showCertificate;
  }
}
