/*
Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

import * as path from 'path';
import {
  Aws, CustomResource, Duration,
  RemovalPolicy,
} from 'aws-cdk-lib';
import {
  Code, Function,
  LayerVersion,
  Runtime,
} from 'aws-cdk-lib/aws-lambda';
import { PolicyStatement, Effect, Role, ServicePrincipal, Policy } from 'aws-cdk-lib/aws-iam';
import { Provider } from 'aws-cdk-lib/custom-resources';
import { Construct } from 'constructs';
import { SolutionInfo } from '../common/solution-info';

export interface DeleteResourcesProps {
}

// delete resources generated by the program
export class DeleteResourcesStack extends Construct {
  constructor(scope: Construct, id: string, props?: DeleteResourcesProps) {
    super(scope, id);

    // Create a lambda layer with required python packages.
    const deleteResourcesLayer = new LayerVersion(this, 'DeleteResources', {
      code: Code.fromAsset(path.join(__dirname, './delete-resources'), {
        bundling: {
          image: Runtime.PYTHON_3_9.bundlingImage,
          command: [
            'bash',
            '-c',
            `pip install -r requirements.txt ${SolutionInfo.PIP_MIRROR_PARAMETER} -t /asset-output/python`,
          ],
        },
      }),
      layerVersionName: `${SolutionInfo.SOLUTION_NAME_ABBR}-DeleteResources`,
      compatibleRuntimes: [Runtime.PYTHON_3_9],
      description: `${SolutionInfo.SOLUTION_NAME} - delete resources generated by the program layer`,
    });

    const deleteResourcesRole = new Role(this, 'DeleteResourcesRole', {
      assumedBy: new ServicePrincipal('lambda.amazonaws.com'),
    });
    deleteResourcesRole.attachInlinePolicy(new Policy(this, 'AWSLambdaBasicExecutionPolicy', {
      policyName: 'AWSLambdaBasicExecutionPolicy',
      statements: [
        new PolicyStatement({
          effect: Effect.ALLOW,
          actions: [
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:PutLogEvents"
          ],
          resources: ["*"]
        }),
      ]}));   
    const noramlStatement = new PolicyStatement({
      effect: Effect.ALLOW,
      actions:["events:DeleteRule",
              "events:ListRules",
              "events:RemoveTargets"],
      resources: [`arn:${Aws.PARTITION}:events:*:${Aws.ACCOUNT_ID}:rule/*`],
    });
    deleteResourcesRole.addToPolicy(noramlStatement);

    const deleteResourcesFunction = new Function(this, 'DeleteResourcesFunction', {
      functionName: `${SolutionInfo.SOLUTION_NAME_ABBR}-DeleteResources`,
      description: `${SolutionInfo.SOLUTION_NAME} - delete resources generated by the program`,
      runtime: Runtime.PYTHON_3_9,
      handler: 'delete_resources.lambda_handler',
      code: Code.fromAsset(path.join(__dirname, './delete-resources')),
      memorySize: 1024,
      timeout: Duration.minutes(1),
      layers: [deleteResourcesLayer],
      role: deleteResourcesRole,
    });
    deleteResourcesFunction.node.addDependency(deleteResourcesRole);

    const deleteResourcesProvider = new Provider(this, 'DeleteResourcesProvider', {
      onEventHandler: deleteResourcesFunction,
    });

    const deleteResourcesTrigger = new CustomResource(this, 'DeleteResourcesTrigger', {
      serviceToken: deleteResourcesProvider.serviceToken,
      properties: {
        SolutionNameAbbr: SolutionInfo.SOLUTION_NAME_ABBR,
      },
    });
    deleteResourcesTrigger.node.addDependency(deleteResourcesProvider);
  }
}
